<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Quarkus on g1raffi.doc</title><link>/doc/quarkus/</link><description>Recent content in Quarkus on g1raffi.doc</description><generator>Hugo -- gohugo.io</generator><atom:link href="/doc/quarkus/index.xml" rel="self" type="application/rss+xml"/><item><title>Reactive</title><link>/doc/quarkus/psql/psql/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/doc/quarkus/psql/psql/</guid><description>PSQL Quarkus Reactive psql client ./mvnw quarkus:add-extension -Dextensions=&amp;#34;reactive-pg-client&amp;#34; Starts automatically new devservice psql container with db/user/password = quarkus.
root@ac1e2f26032a:/# psql -U quarkus -d quarkus -h localhost -p 5432 Create InitDB Skript like @ApplicationScoped public class DBInit { private final PgPool client; private final boolean schemaCreate; private static final Logger log = Logger.getLogger(DBInit.class.getName()); public DBInit(PgPool client, @ConfigProperty(name = &amp;#34;myapp.schema.create&amp;#34;, defaultValue = &amp;#34;true&amp;#34;) boolean schemaCreate) { this.client = client; this.schemaCreate = schemaCreate; } void onStart(@Observes StartupEvent ev) { if (schemaCreate) { log.</description></item><item><title>JUnit</title><link>/doc/quarkus/junit/junit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/doc/quarkus/junit/junit/</guid><description>Creating Dynamic Tests with JUnit 5 Event.java:
package io.quarkus.mcve.entity; import io.quarkiverse.hibernate.types.json.JsonBinaryType; import io.quarkiverse.hibernate.types.json.JsonTypes; import io.quarkus.hibernate.orm.panache.PanacheEntityBase; import org.hibernate.annotations.Type; import org.hibernate.annotations.TypeDef; import org.hibernate.annotations.TypeDefs; import javax.persistence.Entity; import javax.persistence.Id; import java.time.Instant; import java.util.Map; import java.util.UUID; @Entity @TypeDefs({ @TypeDef(name = &amp;#34;jsonb&amp;#34;, typeClass = JsonBinaryType.class) }) public class Event extends PanacheEntityBase { @Id public UUID id; public String description; public Instant timestamp; @Type(type = JsonTypes.JSON_BIN) public Map&amp;lt;String, String&amp;gt; details; @Type(type = JsonTypes.JSON_BIN) public Map&amp;lt;String, String&amp;gt; monitoring; } Configuration yaml file:</description></item><item><title>Reactive</title><link>/doc/quarkus/reactive/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/doc/quarkus/reactive/</guid><description>Reactive World Emit periodic messages SomeEmitter.class
@ConfigProperty(name = &amp;#34;application.polling.interval-seconds&amp;#34;, defaultValue = &amp;#34;900&amp;#34;) int pollingInterval; @Outgoing(&amp;#34;Trigger&amp;#34;) public Flowable&amp;lt;String&amp;gt; triggerUpdateEvent() { return Flowable.interval(pollingInterval, TimeUnit.SECONDS) .map(tick -&amp;gt; &amp;#34;triggered&amp;#34;); } @Incoming(&amp;#34;Trigger&amp;#34;) @Outgoing(&amp;#34;InboundReading&amp;#34;) public PublisherBuilder&amp;lt;List&amp;lt;E&amp;gt;&amp;gt; update(String triggered) { log.debug(&amp;#34;trigger received&amp;#34;); E e = result(); return ReactiveStreams.of(e); } Add dependencies pom.xml
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;io.quarkus&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;quarkus-reactive-pg-client&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;io.quarkus&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;quarkus-flyway&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;io.quarkus&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;quarkus-jdbc-postgresql&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;io.quarkus&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;quarkus-resteasy-reactive&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;io.quarkus&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;quarkus-resteasy-reactive-jsonb&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; Add dependencies to your code:</description></item></channel></rss>