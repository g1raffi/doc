<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Kubernetes on g1raffi.doc</title><link>http://localhost/kubernetes/</link><description>Recent content in Kubernetes on g1raffi.doc</description><generator>Hugo -- gohugo.io</generator><atom:link href="http://localhost/kubernetes/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>http://localhost/kubernetes/hacky-windoof/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/kubernetes/hacky-windoof/</guid><description> Windoof CP File from pod to windows in gitbash
oc exec PODNAME -c CONTAINER_NAME -- bash -c &amp;#34;base64 FILE&amp;#34; | base64 -d &amp;gt; localfile</description></item><item><title/><link>http://localhost/kubernetes/helm/helm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/kubernetes/helm/helm/</guid><description>Helm Post install hook to test CRD readiness apiVersion: batch/v1 kind: Job metadata: name: &amp;#34;{{ .Release.Name }}&amp;#34; labels: app.kubernetes.io/managed-by: {{ .Release.Service | quote }} app.kubernetes.io/instance: {{ .Release.Name | quote }} app.kubernetes.io/version: {{ .Chart.AppVersion }} helm.sh/chart: &amp;#34;{{ .Chart.Name }}-{{ .Chart.Version }}&amp;#34; annotations: # This is what defines this resource as a hook. Without this line, the # job is considered part of the release. &amp;#34;helm.sh/hook&amp;#34;: post-install &amp;#34;helm.sh/hook-weight&amp;#34;: &amp;#34;-5&amp;#34; &amp;#34;helm.sh/hook-delete-policy&amp;#34;: hook-succeeded spec: template: metadata: name: &amp;#34;{{ .</description></item><item><title/><link>http://localhost/kubernetes/istio/servicemesh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/kubernetes/istio/servicemesh/</guid><description>Service Mesh Operator (Istio) Installing Operator Install ElasticSearch Operator Install Jaeger Operator Install Service Mesh Operator Install Kiali Operator Setup the control plane UI Method:
Create new ServiceMeshControlPlane:
Create namespace (e.g. istio-system) Openshift Web Console Installed Operators Openshift Service Mesh Istio ServiceMeshControlPlane Create new Control Plane Declarative Method:
Create file for ServiceMeshControlPlane (smcp):
apiVersion: maistra.io/v2 kind: ServiceMeshControlPlane metadata: finalizers: - maistra.io/istio-operator generation: 1 name: basic namespace: istio-system spec: grafana: enabled: true jaeger: install: storage: type: Memory kiali: enabled: true prometheus: enabled: true policy: type: Istiod profiles: - default telemetry: type: Istiod tracing: sampling: 10000 type: Jaeger version: v2.</description></item><item><title/><link>http://localhost/kubernetes/openshift/amq/amq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/kubernetes/openshift/amq/amq/</guid><description>AMQ Openshift Setup Links Blog Red Hat
Install Operator
Check and install resources.
Configuration Almost all aspects of the broker on openshift are configured via the CR available. Most settings can be applied in the main resource ActiveMQArtemis.
Addresses Adresses can be configured with the ActiveMQArtemisAddress custom resource. An example can be found here.
Broker The broker will be configured with the ActiveMQArtemis custom resouce. Example.
Securit** Users, Groups and their roles and access strategies to addresses / queues can be defined in the ActiveMQArtemisSecurity custom resource.</description></item><item><title/><link>http://localhost/kubernetes/openshift/amq/consumer/README/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/kubernetes/openshift/amq/consumer/README/</guid><description>consumer Project This project uses Quarkus, the Supersonic Subatomic Java Framework.
If you want to learn more about Quarkus, please visit its website: https://quarkus.io/ .
Running the application in dev mode You can run your application in dev mode that enables live coding using:
./mvnw compile quarkus:dev NOTE: Quarkus now ships with a Dev UI, which is available in dev mode only at http://localhost:8080/q/dev/.
Packaging and running the application The application can be packaged using:</description></item><item><title/><link>http://localhost/kubernetes/openshift/amq/producer/README/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/kubernetes/openshift/amq/producer/README/</guid><description>producer Project This project uses Quarkus, the Supersonic Subatomic Java Framework.
If you want to learn more about Quarkus, please visit its website: https://quarkus.io/ .
Running the application in dev mode You can run your application in dev mode that enables live coding using:
./mvnw compile quarkus:dev NOTE: Quarkus now ships with a Dev UI, which is available in dev mode only at http://localhost:8080/q/dev/.
Packaging and running the application The application can be packaged using:</description></item><item><title/><link>http://localhost/kubernetes/openshift/crc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/kubernetes/openshift/crc/</guid><description> Code Ready Containers Delete existing cluster
# $ crc delete Setup and start cluster
# $ crc setup $ crc start</description></item><item><title/><link>http://localhost/kubernetes/openshift/openshift/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/kubernetes/openshift/openshift/</guid><description>OpenShift Go Templates Get route host
curl $(oc get route ROUTE_NAME -o go-template=&amp;#39;{{(index .status.ingress 0).host}}&amp;#39;)/data Compare ready and desired pod count
[[ $(oc -n NAMESPACE get dc DC_NAME -o go-template=&amp;#39;{{.status.readyReplicas}}&amp;#39;) == $(oc -n NAMESPACE get dc DC_NAME -o go-template=&amp;#39;{{.status.replicas}}&amp;#39;) ]] Compare environment variables of pods
[[ $(oc get pod data-consumer-75f69c845d-564bq -o go-template=&amp;#39;{{(index (index .spec.containers 0).env 1)}}&amp;#39;) == $(oc get pod data-producer-74f5d89975-vwxhw -o go-template=&amp;#39;{{(index (index .spec.containers 0).env 0)}}&amp;#39;) ]] Simple automated apply environment script #!</description></item><item><title/><link>http://localhost/kubernetes/prometheus/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/kubernetes/prometheus/</guid><description>Prometheus Get CPU and Memory usage of kubernetes pods Get effecitve cpu usage of pod rate(conatiner_cpu_usage_seconds_total{container_name != &amp;#34;&amp;#34;, namespace = &amp;#34;&amp;#34;}[5m]) Cpu requests kube_pod_container_resource_requests_cpu_cores{namespace = &amp;#34;&amp;#34;} Effective memory usage sum_by(pod_name, instance)(container_memory_working_set_bytes{namespace=&amp;#34;&amp;#34;} / 1024^3) Memory request kube_pod_container_resource_requests_memory_bytes{namespace = &amp;#34;&amp;#34;} Memory usage relative to request sum by (container, pod, namespace) (container_memory_working_set_bytes{namespace = &amp;#34;pitc-rhe-serverless&amp;#34;,container!=&amp;#34;POD&amp;#34;,container!=&amp;#34;&amp;#34;}) / sum by (container, pod, namespace) (kube_pod_container_resource_requests_memory_bytes{namespace = &amp;#34;pitc-rhe-serverless&amp;#34;}) Prometheus Rules Create alerting rules in Prometheus:
--- apiVersion: monitoring.</description></item></channel></rss>